{
    "Router": {
        "scope": "php",
        "prefix": [
            "Router",
            "Router::"
        ],
        "body": "Router::${1|get,post,put,patch,delete,command|}('\/${2:route}', function(Request \\$req) {\r\t${3|Controller::Method($req);,Middleware::Method($req);\rController::Method($req);|}\r})${4:->name('${5:name}')};\r"
    },
    "Schema Create": {
        "scope": "php",
        "prefix": "Schema::create",
        "body": "Schema::create('${1:table}', function(Schema \\$schema) {\r\t\\$schema->int('id')->auto_increment()->primary();\r\t\\$schema->timestamp('created_at')->attribute();\r\t\\$schema->timestamp('updated_at')->default('CURRENT_TIMESTAMP')->attribute(\"ON UPDATE CURRENT_TIMESTAMP\");\r}, false, '${1:table}');\r"
    },
    "Schema Alter": {
        "scope": "php",
        "prefix": "Schema::alter",
        "body": "Schema::alter('${1:table}', function(Schema \\$schema) {\r\t\\$schema->change('id')->double('id');\r\t\\$schema->change('created_at')->datetime('created_at');\r\t\\$schema->change('updated_at')->datetime('updated_at');\r}, false);\r"
    },
    "Schema Seed": {
        "scope": "php",
        "prefix": "Schema::seed",
        "body": "Schema::seed('${1:table}', \r\t[\r\t\t'field' => 'value',\r\t\t'field' => 'value'\r\t],\r\t[\r\t\t'field' => 'value',\r\t\t'field' => 'value'\r\t]\r\t\/\/ ...\r);\r"
    },
    "Schema Drop": {
        "scope": "php",
        "prefix": "Schema::drop",
        "body": "Schema::drop('${1:table}');\r"
    },
    "Schema Attribute": {
        "scope": "php",
        "prefix": "attribute",
        "body": "attribute('${1|BINARY,UNSIGNED,UNSIGNED ZEROFILL,ON UPDATE CURRENT_TIMESTAMP|}')$0"
    },
    "Schema Auto Increment": {
        "scope": "php",
        "prefix": "auto_increment",
        "body": "auto_increment()$0"
    },
    "Schema Big Int": {
        "scope": "php",
        "prefix": "big_int",
        "body": "big_int('${1:field}', ${2:size})$0"
    },
    "Schema Binary": {
        "scope": "php",
        "prefix": "binary",
        "body": "binary('${1:field}', ${2:size})$0"
    },
    "Schema Bit": {
        "scope": "php",
        "prefix": "bit",
        "body": "bit('${1:field}', ${2:size})$0"
    },
    "Schema Blob": {
        "scope": "php",
        "prefix": "blob",
        "body": "blob('${1:field}')$0"
    },
    "Schema Boolean": {
        "scope": "php",
        "prefix": "boolean",
        "body": "boolean('${1:field}')$0"
    },
    "Schema Change": {
        "scope": "php",
        "prefix": "change",
        "body": "change('${1:field}')$0"
    },
    "Schema Char": {
        "scope": "php",
        "prefix": "char",
        "body": "char('${1:field}', ${2:size})$0"
    },
    "Schema Comment": {
        "scope": "php",
        "prefix": "comment",
        "body": "comment('${1:field}')$0"
    },
    "Schema Date": {
        "scope": "php",
        "prefix": "date",
        "body": "date('${1:field}')$0"
    },
    "Schema Datetime": {
        "scope": "php",
        "prefix": "datetime",
        "body": "datetime('${1:field}')$0"
    },
    "Schema Decimal": {
        "scope": "php",
        "prefix": "decimal",
        "body": "decimal('${1:field}', ${2:size})$0"
    },
    "Schema Default": {
        "scope": "php",
        "prefix": "default",
        "body": "default('${1|NONE,NULL,CURRENT_TIMESTAMP,AS_DEFINED|}')$0"
    },
    "Schema Double": {
        "scope": "php",
        "prefix": "double",
        "body": "double('${1:field}', '${2:size},${3:decimalpoint}')$0"
    },
    "Schema Enum": {
        "scope": "php",
        "prefix": "enum",
        "body": "enum('${1:field}', [$2])$0"
    },
    "Schema Float": {
        "scope": "php",
        "prefix": "float",
        "body": "float('${1:field}', '${2:size},${3:decimalpoint}')$0"
    },
    "Schema Foreign": {
        "scope": "php",
        "prefix": "foreign",
        "body": "foreign('${1:localfield}', '${2:foreigntable}', '${3:foreignfield}', 'ON DELETE ${4|NO ACTION,RESTRICT,CASCADE,SET NULL|}', 'ON UPDATE ${5|NO ACTION,RESTRICT,CASCADE,SET NULL|}');"
    },
    "Schema Index": {
        "scope": "php",
        "prefix": "index",
        "body": "index()$0"
    },
    "Schema Int": {
        "scope": "php",
        "prefix": "int",
        "body": "int('${1:field}', ${2:size})$0"
    },
    "Schema Json": {
        "scope": "php",
        "prefix": "json",
        "body": "json('${1:field}')$0"
    },
    "Schema Long Blob": {
        "scope": "php",
        "prefix": "long_blob",
        "body": "long_blob('${1:field}')$0"
    },
    "Schema Long Text": {
        "scope": "php",
        "prefix": "long_text",
        "body": "long_text('${1:field}')$0"
    },
    "Schema Medium Blob": {
        "scope": "php",
        "prefix": "medium_blob",
        "body": "medium_blob('${1:field}')$0"
    },
    "Schema Medium Int": {
        "scope": "php",
        "prefix": "medium_int",
        "body": "medium_int('${1:field}', ${2:size})$0"
    },
    "Schema Text": {
        "scope": "php",
        "prefix": "text",
        "body": "text('${1:field}')$0"
    },
    "Schema Medium Text": {
        "scope": "php",
        "prefix": "medium_text",
        "body": "medium_text('${1:field}')$0"
    },
    "Schema Not Nullable": {
        "scope": "php",
        "prefix": "not_nullable",
        "body": "not_nullable()$0"
    },
    "Schema Nullable": {
        "scope": "php",
        "prefix": "nullable",
        "body": "nullable()$0"
    },
    "Schema Primary": {
        "scope": "php",
        "prefix": "primary",
        "body": "primary()$0"
    },
    "Schema Real": {
        "scope": "php",
        "prefix": "real",
        "body": "real('${1:field}', '${2:size},${3:decimalpoint}')$0"
    },
    "Schema Serial": {
        "scope": "php",
        "prefix": "serial",
        "body": "serial('${1:field}')$0"
    },
    "Schema Set": {
        "scope": "php",
        "prefix": "set",
        "body": "set('${1:field}', [$2])$0"
    },
    "Schema Small Int": {
        "scope": "php",
        "prefix": "small_int",
        "body": "small_int('${1:field}', ${2:size})$0"
    },
    "Schema Time": {
        "scope": "php",
        "prefix": "time",
        "body": "time('${1:field}')$0"
    },
    "Schema Timestamp": {
        "scope": "php",
        "prefix": "timestamp",
        "body": "timestamp('${1:field}')$0"
    },
    "Schema Tiny Blob": {
        "scope": "php",
        "prefix": "tiny_blob",
        "body": "tiny_blob('${1:field}')$0"
    },
    "Schema Tiny Int": {
        "scope": "php",
        "prefix": "tiny_int",
        "body": "tiny_int('${1:field}', ${2:size})$0"
    },
    "Schema Tiny Text": {
        "scope": "php",
        "prefix": "tiny_text",
        "body": "tiny_text('${1:field}')$0"
    },
    "Schema Unique": {
        "scope": "php",
        "prefix": "unique",
        "body": "unique('${1:field}')$0"
    },
    "Schema Varbinary": {
        "scope": "php",
        "prefix": "varbinary",
        "body": "varbinary('${1:field}', ${2:size})$0"
    },
    "Schema Varchar": {
        "scope": "php",
        "prefix": "varchar",
        "body": "varchar('${1:field}', ${2:size})$0"
    },
    "Schema Year": {
        "scope": "php",
        "prefix": "year",
        "body": "year('${1:field}')$0"
    },
    "View Import": {
        "scope": "html",
        "prefix": "@import",
        "body": "@import ${1:view}.html\r"
    },
    "View PHP Mode": {
        "scope": "html",
        "prefix": "@php",
        "body": "@php $0;\r"
    },
    "View Echo Variable": {
        "scope": "html",
        "prefix": "{{",
        "body": "{{ $0 }}"
    },
    "View Form CSRF": {
        "scope": "html",
        "prefix": [
            "@_csrftoken",
            "@csrf"
        ],
        "body": "@_csrftoken\r"
    },
    "View Javascript CSRF": {
        "scope": "html",
        "prefix": [
            "@csrftoken",
            "@csrf"
        ],
        "body": "@csrftoken\r"
    },
    "View Form HTTP Method": {
        "scope": "html",
        "prefix": "@method",
        "body": "@_method_${1|put,patch,delete|}\r"
    },
    "View If Condition": {
        "scope": "html",
        "prefix": "@if",
        "body": "@if (${1:condition})\r$0\t\r${2|@endif,@else\r@endif,@elseif (condition)\r@else\r@endif|}"
    },
    "View For Iteration": {
        "scope": "html",
        "prefix": "@for",
        "body": "@for (\\$${1:i} = ${2:0}; \\$${1:i} < \\$${3:length}; \\$${1:i}++)\r\t$0\r@endfor"
    },
    "View Foreach Iteration": {
        "scope": "html",
        "prefix": "@foreach",
        "body": "@foreach (\\$${1:array} as \\$${2:element})\r\t$0\r@endforeach"
    },
    "View While Iteration": {
        "scope": "html",
        "prefix": "@while",
        "body": "@while (${1:condition})\r\t$0\r@endwhile"
    },
    "Controller Method": {
        "scope": "php",
        "prefix": "psf",
        "body": "public static function ${1:method}(Request \\$req)\r{\r\t$0\r}\r"
    },
    "response Render": {
        "scope": "php",
        "prefix": "render",
        "body": "render('${1:filename}', [\r\t'${2:variable}' => '${3:value}',\r], ${4|200,400,500|});\r"
    },
    "Response Route": {
        "scope": "php",
        "prefix": "route",
        "body": "route('${1:filename}');"
    },
    "Response Success": {
        "scope": "php",
        "prefix": "success",
        "body": "success('${1:success}', [\r\t'${2:variable}' => '${3:value}',\r], ${4:200});\r"
    },
    "Response Error": {
        "scope": "php",
        "prefix": "error",
        "body": "error('${1:error}', [\r\t'${2:variable}' => '${3:value}',\r], ${4:400});\r"
    },
    "Response Redirect": {
        "scope": "php",
        "prefix": "error",
        "body": "redirect('${1:name}');"
    },
    "Response Html": {
        "scope": "php",
        "prefix": "html",
        "body": "html('${1:filename}', ${2|200,400,500|});"
    },
    "Response Xml": {
        "scope": "php",
        "prefix": "xml",
        "body": "xml('${1:filename}', ${2|200,400,500|});"
    },
    "Response Asset": {
        "scope": "html",
        "prefix": "asset",
        "body": "asset('${1|js,css,imgs|}\/filename')"
    },
    "Response Storage": {
        "scope": "html",
        "prefix": "storage",
        "body": "storage('filename')"
    },
    "Upload Fields": {
        "scope": "php",
        "prefix": "Upload::$",
        "body": "Upload::${1|$field = 'Field name';,$unit = 'Kb'; \/\/ Mb \/\/ Gb|}$0"
    },
    "Upload Tmp": {
        "scope": "php",
        "prefix": "Upload::tmp",
        "body": "Upload::tmp('${1:filename}', '${2:destination}', ${3|Upload::$imagefiles,Upload::$videofiles,Upload::$audiofiles,Upload::$zipfiles,Upload::$documentfiles,Upload::$fontfiles,Upload::$textfiles,['your-custom-content-types']|}, ${4:minsize}, ${5:maxsize});\n$0"
    },
    "JWT encode": {
        "scope": "php",
        "prefix": "JWT::encode",
        "body": "JWT::encode(${1:payload}, ${2:key}, ${3|HS256,HS384,HS512,RS256|}, ${4:keyId}, ${5:head})$0"
    },
    "JWT decode": {
        "scope": "php",
        "prefix": "JWT::decode",
        "body": "JWT::decode(${1:token}, ${2:key}, [${3|HS256,HS384,HS512,RS256|}])$0"
    },
    "JWT sign": {
        "scope": "php",
        "prefix": "JWT::sign",
        "body": "JWT::sign(${1:msg}, ${2:key}, [${3|HS256,HS384,HS512,RS256|}])$0"
    },
    "Mail asHTML": {
        "scope": "php",
        "prefix": "asHTML",
        "body": "asHTML(${1:message})$0"
    },
    "Mail asText": {
        "scope": "php",
        "prefix": "asText",
        "body": "asText(${1:message}, ${2:wordwrap})$0"
    },
    "Mail withAttachment": {
        "scope": "php",
        "prefix": "withAttachment",
        "body": "withAttachment('${1:path}', '${2:name}', '${3:encoding}', '${4:type}', '${5:disposition}')$0"
    },
    "Mail Send": {
        "scope": "php",
        "prefix": "->send",
        "body": "->send('${1:from}', '${2:to}', '${3:subject}', '${4:reply}');"
    },
    "Mail Send Multiple": {
        "scope": "php",
        "prefix": "->sendMultiple",
        "body": "->sendMultiple('${1:from}', '${2:to}', '${3:subject}', '${4:reply}');"
    },
    "Cipher Hash": {
        "scope": "php",
        "prefix": "Cipher::hash",
        "body": "Cipher::hash('${1:length}');"
    },
    "Cipher Token": {
        "scope": "php",
        "prefix": "Cipher::token",
        "body": "Cipher::token('${1:length}');"
    },
    "Cipher Encrypt Digest": {
        "scope": "php",
        "prefix": "Cipher::encryptDigest",
        "body": "Cipher::encryptDigest('${1:username}', '${2:password}');"
    },
    "Cipher Decrypt Digest": {
        "scope": "php",
        "prefix": "Cipher::decryptDigest",
        "body": "Cipher::decryptDigest('${1:authDigest}');"
    },
    "Cipher Sign JWT": {
        "scope": "php",
        "prefix": "Cipher::signJWT",
        "body": "Cipher::signJWT([${1}]);"
    },
    "Cipher Hash Password": {
        "scope": "php",
        "prefix": "Cipher::hashPassword",
        "body": "Cipher::hashPassword('${1:password}');"
    },
    "Cipher Verify Password": {
        "scope": "php",
        "prefix": "Cipher::verifyPassword",
        "body": "Cipher::verifyPassword('${1:password}', '${2:hash}');"
    },
    "Cipher Encrypt AES": {
        "scope": "php",
        "prefix": "Cipher::encryptAES",
        "body": "Cipher::encryptAES(${1:key}, ${2:data});"
    },
    "Cipher Decrypt AES": {
        "scope": "php",
        "prefix": "Cipher::decryptAES",
        "body": "Cipher::decryptAES(${1:key}, ${2:ciphertext});"
    },
    "Cipher Encrypt AES Json": {
        "scope": "php",
        "prefix": "Cipher::encryptAESJson",
        "body": "Cipher::encryptAESJson(${1:key}, ${2:data});"
    },
    "Cipher Decrypt AES Json": {
        "scope": "php",
        "prefix": "Cipher::decryptAESJson",
        "body": "Cipher::decryptAESJson(${1:key}, ${2:cipherjson});"
    },
    "User Has": {
        "scope": "php",
        "prefix": "User::has",
        "body": "User::has('${1:privilege}');"
    },
    "User Is": {
        "scope": "php",
        "prefix": "User::is",
        "body": "User::is('${1:role}');"
    },
    "User Is Not": {
        "scope": "php",
        "prefix": "User::isNot",
        "body": "User::isNot('${1:role}');"
    },
    "User Instance": {
        "scope": "php",
        "prefix": "User::user",
        "body": "User::user();"
    },
    "User Fields": {
        "scope": "php",
        "prefix": "User::$",
        "body": "User::\\$${1|isAuthenticated,username,role,privileges|}"
    },
    "Zip": {
        "scope": "php",
        "prefix": "Zip::zip",
        "body": "Zip::zip(${1:source}, ${2:destination}, ${3:filename});"
    },
    "Validate Has Exact Length": {
        "scope": "php",
        "prefix": "Validate::hasExactLength",
        "body": "Validate::hasExactLength(${1:field}, ${2:value}, ${3:length});"
    },
    "Validate Has Max Length": {
        "scope": "php",
        "prefix": "Validate::hasMaxLength",
        "body": "Validate::hasMaxLength(${1:field}, ${2:value}, ${3:length});"
    },
    "Validate Has Min Length": {
        "scope": "php",
        "prefix": "Validate::hasMinLength",
        "body": "Validate::hasMinLength(${1:field}, ${2:value}, ${3:length});"
    },
    "Validate Is Decimal": {
        "scope": "php",
        "prefix": "Validate::isDecimal",
        "body": "Validate::isDecimal(${1:field}, ${2:value});"
    },
    "Validate Must Contain Number": {
        "scope": "php",
        "prefix": "Validate::mustContainNumber",
        "body": "Validate::mustContainNumber(${1:field}, ${2:value});"
    },
    "Validate Must Contain Numbers": {
        "scope": "php",
        "prefix": "Validate::mustContainLetters",
        "body": "Validate::mustContainLetters(${1:field}, ${2:value});"
    },
    "Validate Must Contain Upper Case": {
        "scope": "php",
        "prefix": "Validate::mustContainUpperCase",
        "body": "Validate::mustContainUpperCase(${1:field}, ${2:value});"
    },
    "Validate Must Contain Lower Case": {
        "scope": "php",
        "prefix": "Validate::mustContainLowerCase",
        "body": "Validate::mustContainLowerCase(${1:field}, ${2:value});"
    },
    "Validate Is Valid Email": {
        "scope": "php",
        "prefix": "Validate::isValidEmail",
        "body": "Validate::isValidEmail(${1:field}, ${2:value});"
    },
    "Validate Is Valid Password": {
        "scope": "php",
        "prefix": "Validate::isValidPassword",
        "body": "Validate::isValidPassword(${1:field}, ${2:value}, ${3:mustContainNumber}, ${4:mustContainLowerCase}, ${5:mustContainUpperCase}, ${6:mustContainSpecialChars}, ${7:minlength});"
    },
    "Validate Is Valid Telephone": {
        "scope": "php",
        "prefix": "Validate::isValidTelephone",
        "body": "Validate::isValidTelephone(${1:field}, ${2:value});"
    },
    "Validate Is Valid Date": {
        "scope": "php",
        "prefix": "Validate::isValidDate",
        "body": "Validate::isValidDate(${1:field}, ${2:value});"
    },
    "Validate Is Valid Url": {
        "scope": "php",
        "prefix": "Validate::isValidUrl",
        "body": "Validate::isValidUrl(${1:field}, ${2:value});"
    },
    "Validate Is Valid Domain": {
        "scope": "php",
        "prefix": "Validate::isValidDomain",
        "body": "Validate::isValidDomain(${1:field}, ${2:value}, ${3:length});"
    },
    "Validate Is Valid IP Address": {
        "scope": "php",
        "prefix": "Validate::isValidIP",
        "body": "Validate::isValidIP(${1:field}, ${2:value}, ${3:length});"
    },
    "Validate Is Valid Mac Address": {
        "scope": "php",
        "prefix": "Validate::isValidMAC",
        "body": "Validate::isValidMAC(${1:field}, ${2:value}, ${3:length});"
    },
    "Validate Fields": {
        "scope": "php",
        "prefix": "Validate::$",
        "body": "Validate::\\$${1|status,error|}"
    },
    "Users create": {
        "scope": "php",
        "prefix": "Users::create",
        "body": "Users::create([\r\t\"id\" => $1,\r\t\"telephone\" => $2,\r\t\"email\" => $3,\r\t\"password\" => $4,\r\t\"token\" => $5,\r\t\"role\" => $6,\r\t\"permissions\" => $7,\r\t\"firstname\" => $8,\r\t\"lastname\" => $9,\r\t\"middlename\" => $10,\r\t\"nationality\" => $11,\r\t\"residential_address\" => $12,\r\t\"occupation\" => $13,\r\t\"profile_picture\" => $14,\r\t\"nextofkin_name\" => $15,\r\t\"nextofkin_telephone\" => $16,\r\t\"nextofkin_residential_address\" => $17,\r\t\"accountnumber\" => $18,\r\t\"accountname\" => $19,\r\t\"bankname\" => $20,\r\t\"favourite_sport\" => $21,\r\t\"favourite_team_local\" => $22,\r\t\"favourite_team_foreign\" => $23,\r\t\"favourite_team_international\" => $24,\r\t\"favourite_team_continental\" => $25,\r\t\"favourite_team_worldcup\" => $26,\r\t\"favourite_team_olympic\" => $27,\r\t\"referredby\" => $28,\r\t\"referral_code\" => $29,\r\t\"node_level\" => $30,\r\t\"member_id\" => $31,\r\t\"verification_status\" => $32,\r\t\"created_at\" => $33,\r\t\"updated_at\" => $34\r]);"
    },
    "Users create many": {
        "scope": "php",
        "prefix": "Users::createMany",
        "body": "Users::createMany([\r\t\"id\" => $1,\r\t\"telephone\" => $2,\r\t\"email\" => $3,\r\t\"password\" => $4,\r\t\"token\" => $5,\r\t\"role\" => $6,\r\t\"permissions\" => $7,\r\t\"firstname\" => $8,\r\t\"lastname\" => $9,\r\t\"middlename\" => $10,\r\t\"nationality\" => $11,\r\t\"residential_address\" => $12,\r\t\"occupation\" => $13,\r\t\"profile_picture\" => $14,\r\t\"nextofkin_name\" => $15,\r\t\"nextofkin_telephone\" => $16,\r\t\"nextofkin_residential_address\" => $17,\r\t\"accountnumber\" => $18,\r\t\"accountname\" => $19,\r\t\"bankname\" => $20,\r\t\"favourite_sport\" => $21,\r\t\"favourite_team_local\" => $22,\r\t\"favourite_team_foreign\" => $23,\r\t\"favourite_team_international\" => $24,\r\t\"favourite_team_continental\" => $25,\r\t\"favourite_team_worldcup\" => $26,\r\t\"favourite_team_olympic\" => $27,\r\t\"referredby\" => $28,\r\t\"referral_code\" => $29,\r\t\"node_level\" => $30,\r\t\"member_id\" => $31,\r\t\"verification_status\" => $32,\r\t\"created_at\" => $33,\r\t\"updated_at\" => $34\r],\r${35:[]}\r);"
    },
    "Users update": {
        "scope": "php",
        "prefix": "Users::update",
        "body": "Users::update([\r\t\"id\" => $1,\r\t\"telephone\" => $2,\r\t\"email\" => $3,\r\t\"password\" => $4,\r\t\"token\" => $5,\r\t\"role\" => $6,\r\t\"permissions\" => $7,\r\t\"firstname\" => $8,\r\t\"lastname\" => $9,\r\t\"middlename\" => $10,\r\t\"nationality\" => $11,\r\t\"residential_address\" => $12,\r\t\"occupation\" => $13,\r\t\"profile_picture\" => $14,\r\t\"nextofkin_name\" => $15,\r\t\"nextofkin_telephone\" => $16,\r\t\"nextofkin_residential_address\" => $17,\r\t\"accountnumber\" => $18,\r\t\"accountname\" => $19,\r\t\"bankname\" => $20,\r\t\"favourite_sport\" => $21,\r\t\"favourite_team_local\" => $22,\r\t\"favourite_team_foreign\" => $23,\r\t\"favourite_team_international\" => $24,\r\t\"favourite_team_continental\" => $25,\r\t\"favourite_team_worldcup\" => $26,\r\t\"favourite_team_olympic\" => $27,\r\t\"referredby\" => $28,\r\t\"referral_code\" => $29,\r\t\"node_level\" => $30,\r\t\"member_id\" => $31,\r\t\"verification_status\" => $32,\r\t\"created_at\" => $33,\r\t\"updated_at\" => $34\r], \"WHERE ${35|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|} = 1\");"
    },
    "Users delete": {
        "scope": "php",
        "prefix": "Users::delete",
        "body": "Users::delete(\"WHERE ${1|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|} = 1\");"
    },
    "Users exist": {
        "scope": "php",
        "prefix": "Users::exist",
        "body": "Users::exist(\"WHERE ${1|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|} = 1\");"
    },
    "Users findAll": {
        "scope": "php",
        "prefix": "Users::findAll",
        "body": "Users::findAll(\"${1:id, telephone, email, password, token, role, permissions, firstname, lastname, middlename, nationality, residential_address, occupation, profile_picture, nextofkin_name, nextofkin_telephone, nextofkin_residential_address, accountnumber, accountname, bankname, favourite_sport, favourite_team_local, favourite_team_foreign, favourite_team_international, favourite_team_continental, favourite_team_worldcup, favourite_team_olympic, referredby, referral_code, node_level, member_id, verification_status, created_at, updated_at}\", \"WHERE ${2|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|} = 1\");"
    },
    "Users findOne": {
        "scope": "php",
        "prefix": "Users::findOne",
        "body": "Users::findOne(\"${1:id, telephone, email, password, token, role, permissions, firstname, lastname, middlename, nationality, residential_address, occupation, profile_picture, nextofkin_name, nextofkin_telephone, nextofkin_residential_address, accountnumber, accountname, bankname, favourite_sport, favourite_team_local, favourite_team_foreign, favourite_team_international, favourite_team_continental, favourite_team_worldcup, favourite_team_olympic, referredby, referral_code, node_level, member_id, verification_status, created_at, updated_at}\", \"WHERE ${2|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|} = 1\");"
    },
    "Users findJoin": {
        "scope": "php",
        "prefix": "Users::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rUsers::findJoin(${1:\"{\\$prefix\\}users.${2|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|}\"}, \"WHERE ${3|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}users.${6|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Users fields": {
        "scope": "php",
        "prefix": "users.",
        "body": "\". DB_PREFIX .\"users.${1|id,telephone,email,password,token,role,permissions,firstname,lastname,middlename,nationality,residential_address,occupation,profile_picture,nextofkin_name,nextofkin_telephone,nextofkin_residential_address,accountnumber,accountname,bankname,favourite_sport,favourite_team_local,favourite_team_foreign,favourite_team_international,favourite_team_continental,favourite_team_worldcup,favourite_team_olympic,referredby,referral_code,node_level,member_id,verification_status,created_at,updated_at|}"
    },
    "Slots create": {
        "scope": "php",
        "prefix": "Slots::create",
        "body": "Slots::create([\r\t\"id\" => $1,\r\t\"program\" => $2,\r\t\"no_slots\" => $3,\r\t\"cost\" => $4,\r\t\"benefits\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r]);"
    },
    "Slots create many": {
        "scope": "php",
        "prefix": "Slots::createMany",
        "body": "Slots::createMany([\r\t\"id\" => $1,\r\t\"program\" => $2,\r\t\"no_slots\" => $3,\r\t\"cost\" => $4,\r\t\"benefits\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r],\r${8:[]}\r);"
    },
    "Slots update": {
        "scope": "php",
        "prefix": "Slots::update",
        "body": "Slots::update([\r\t\"id\" => $1,\r\t\"program\" => $2,\r\t\"no_slots\" => $3,\r\t\"cost\" => $4,\r\t\"benefits\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r], \"WHERE ${8|id,program,no_slots,cost,benefits,created_at,updated_at|} = 1\");"
    },
    "Slots delete": {
        "scope": "php",
        "prefix": "Slots::delete",
        "body": "Slots::delete(\"WHERE ${1|id,program,no_slots,cost,benefits,created_at,updated_at|} = 1\");"
    },
    "Slots exist": {
        "scope": "php",
        "prefix": "Slots::exist",
        "body": "Slots::exist(\"WHERE ${1|id,program,no_slots,cost,benefits,created_at,updated_at|} = 1\");"
    },
    "Slots findAll": {
        "scope": "php",
        "prefix": "Slots::findAll",
        "body": "Slots::findAll(\"${1:id, program, no_slots, cost, benefits, created_at, updated_at}\", \"WHERE ${2|id,program,no_slots,cost,benefits,created_at,updated_at|} = 1\");"
    },
    "Slots findOne": {
        "scope": "php",
        "prefix": "Slots::findOne",
        "body": "Slots::findOne(\"${1:id, program, no_slots, cost, benefits, created_at, updated_at}\", \"WHERE ${2|id,program,no_slots,cost,benefits,created_at,updated_at|} = 1\");"
    },
    "Slots findJoin": {
        "scope": "php",
        "prefix": "Slots::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rSlots::findJoin(${1:\"{\\$prefix\\}slots.${2|id,program,no_slots,cost,benefits,created_at,updated_at|}\"}, \"WHERE ${3|id,program,no_slots,cost,benefits,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}slots.${6|id,program,no_slots,cost,benefits,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Slots fields": {
        "scope": "php",
        "prefix": "slots.",
        "body": "\". DB_PREFIX .\"slots.${1|id,program,no_slots,cost,benefits,created_at,updated_at|}"
    },
    "Invoice create": {
        "scope": "php",
        "prefix": "Invoice::create",
        "body": "Invoice::create([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"invoice_number\" => $3,\r\t\"invoice_description\" => $4,\r\t\"amount_due\" => $5,\r\t\"amount_paid\" => $6,\r\t\"payment_method\" => $7,\r\t\"payment_evidence\" => $8,\r\t\"status\" => $9,\r\t\"created_at\" => $10,\r\t\"updated_at\" => $11\r]);"
    },
    "Invoice create many": {
        "scope": "php",
        "prefix": "Invoice::createMany",
        "body": "Invoice::createMany([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"invoice_number\" => $3,\r\t\"invoice_description\" => $4,\r\t\"amount_due\" => $5,\r\t\"amount_paid\" => $6,\r\t\"payment_method\" => $7,\r\t\"payment_evidence\" => $8,\r\t\"status\" => $9,\r\t\"created_at\" => $10,\r\t\"updated_at\" => $11\r],\r${12:[]}\r);"
    },
    "Invoice update": {
        "scope": "php",
        "prefix": "Invoice::update",
        "body": "Invoice::update([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"invoice_number\" => $3,\r\t\"invoice_description\" => $4,\r\t\"amount_due\" => $5,\r\t\"amount_paid\" => $6,\r\t\"payment_method\" => $7,\r\t\"payment_evidence\" => $8,\r\t\"status\" => $9,\r\t\"created_at\" => $10,\r\t\"updated_at\" => $11\r], \"WHERE ${12|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|} = 1\");"
    },
    "Invoice delete": {
        "scope": "php",
        "prefix": "Invoice::delete",
        "body": "Invoice::delete(\"WHERE ${1|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|} = 1\");"
    },
    "Invoice exist": {
        "scope": "php",
        "prefix": "Invoice::exist",
        "body": "Invoice::exist(\"WHERE ${1|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|} = 1\");"
    },
    "Invoice findAll": {
        "scope": "php",
        "prefix": "Invoice::findAll",
        "body": "Invoice::findAll(\"${1:id, user_id, invoice_number, invoice_description, amount_due, amount_paid, payment_method, payment_evidence, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|} = 1\");"
    },
    "Invoice findOne": {
        "scope": "php",
        "prefix": "Invoice::findOne",
        "body": "Invoice::findOne(\"${1:id, user_id, invoice_number, invoice_description, amount_due, amount_paid, payment_method, payment_evidence, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|} = 1\");"
    },
    "Invoice findJoin": {
        "scope": "php",
        "prefix": "Invoice::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rInvoice::findJoin(${1:\"{\\$prefix\\}invoice.${2|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|}\"}, \"WHERE ${3|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}invoice.${6|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Invoice fields": {
        "scope": "php",
        "prefix": "invoice.",
        "body": "\". DB_PREFIX .\"invoice.${1|id,user_id,invoice_number,invoice_description,amount_due,amount_paid,payment_method,payment_evidence,status,created_at,updated_at|}"
    },
    "OrganisationInfo create": {
        "scope": "php",
        "prefix": "OrganisationInfo::create",
        "body": "OrganisationInfo::create([\r\t\"id\" => $1,\r\t\"about_us\" => $2,\r\t\"disclaimer\" => $3,\r\t\"how_it_works\" => $4,\r\t\"terms_and_condition\" => $5,\r\t\"mou\" => $6,\r\t\"membership\" => $7,\r\t\"rewards_and_benefits\" => $8,\r\t\"tournaments_and_leagues\" => $9,\r\t\"contact_telephone\" => $10,\r\t\"contact_address\" => $11,\r\t\"contact_email\" => $12,\r\t\"faq\" => $13,\r\t\"created_at\" => $14,\r\t\"updated_at\" => $15\r]);"
    },
    "OrganisationInfo create many": {
        "scope": "php",
        "prefix": "OrganisationInfo::createMany",
        "body": "OrganisationInfo::createMany([\r\t\"id\" => $1,\r\t\"about_us\" => $2,\r\t\"disclaimer\" => $3,\r\t\"how_it_works\" => $4,\r\t\"terms_and_condition\" => $5,\r\t\"mou\" => $6,\r\t\"membership\" => $7,\r\t\"rewards_and_benefits\" => $8,\r\t\"tournaments_and_leagues\" => $9,\r\t\"contact_telephone\" => $10,\r\t\"contact_address\" => $11,\r\t\"contact_email\" => $12,\r\t\"faq\" => $13,\r\t\"created_at\" => $14,\r\t\"updated_at\" => $15\r],\r${16:[]}\r);"
    },
    "OrganisationInfo update": {
        "scope": "php",
        "prefix": "OrganisationInfo::update",
        "body": "OrganisationInfo::update([\r\t\"id\" => $1,\r\t\"about_us\" => $2,\r\t\"disclaimer\" => $3,\r\t\"how_it_works\" => $4,\r\t\"terms_and_condition\" => $5,\r\t\"mou\" => $6,\r\t\"membership\" => $7,\r\t\"rewards_and_benefits\" => $8,\r\t\"tournaments_and_leagues\" => $9,\r\t\"contact_telephone\" => $10,\r\t\"contact_address\" => $11,\r\t\"contact_email\" => $12,\r\t\"faq\" => $13,\r\t\"created_at\" => $14,\r\t\"updated_at\" => $15\r], \"WHERE ${16|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|} = 1\");"
    },
    "OrganisationInfo delete": {
        "scope": "php",
        "prefix": "OrganisationInfo::delete",
        "body": "OrganisationInfo::delete(\"WHERE ${1|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|} = 1\");"
    },
    "OrganisationInfo exist": {
        "scope": "php",
        "prefix": "OrganisationInfo::exist",
        "body": "OrganisationInfo::exist(\"WHERE ${1|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|} = 1\");"
    },
    "OrganisationInfo findAll": {
        "scope": "php",
        "prefix": "OrganisationInfo::findAll",
        "body": "OrganisationInfo::findAll(\"${1:id, about_us, disclaimer, how_it_works, terms_and_condition, mou, membership, rewards_and_benefits, tournaments_and_leagues, contact_telephone, contact_address, contact_email, faq, created_at, updated_at}\", \"WHERE ${2|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|} = 1\");"
    },
    "OrganisationInfo findOne": {
        "scope": "php",
        "prefix": "OrganisationInfo::findOne",
        "body": "OrganisationInfo::findOne(\"${1:id, about_us, disclaimer, how_it_works, terms_and_condition, mou, membership, rewards_and_benefits, tournaments_and_leagues, contact_telephone, contact_address, contact_email, faq, created_at, updated_at}\", \"WHERE ${2|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|} = 1\");"
    },
    "OrganisationInfo findJoin": {
        "scope": "php",
        "prefix": "OrganisationInfo::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rOrganisationInfo::findJoin(${1:\"{\\$prefix\\}organisation_info.${2|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|}\"}, \"WHERE ${3|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}organisation_info.${6|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "OrganisationInfo fields": {
        "scope": "php",
        "prefix": "organisation_info.",
        "body": "\". DB_PREFIX .\"organisation_info.${1|id,about_us,disclaimer,how_it_works,terms_and_condition,mou,membership,rewards_and_benefits,tournaments_and_leagues,contact_telephone,contact_address,contact_email,faq,created_at,updated_at|}"
    },
    "UserSlots create": {
        "scope": "php",
        "prefix": "UserSlots::create",
        "body": "UserSlots::create([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"user_package_id\" => $3,\r\t\"no_slots\" => $4,\r\t\"referral_code\" => $5,\r\t\"referral_level\" => $6,\r\t\"node_level\" => $7,\r\t\"referrals_required\" => $8,\r\t\"referrals_acquired\" => $9,\r\t\"update_uplink\" => $10,\r\t\"status\" => $11,\r\t\"created_at\" => $12,\r\t\"updated_at\" => $13\r]);"
    },
    "UserSlots create many": {
        "scope": "php",
        "prefix": "UserSlots::createMany",
        "body": "UserSlots::createMany([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"user_package_id\" => $3,\r\t\"no_slots\" => $4,\r\t\"referral_code\" => $5,\r\t\"referral_level\" => $6,\r\t\"node_level\" => $7,\r\t\"referrals_required\" => $8,\r\t\"referrals_acquired\" => $9,\r\t\"update_uplink\" => $10,\r\t\"status\" => $11,\r\t\"created_at\" => $12,\r\t\"updated_at\" => $13\r],\r${14:[]}\r);"
    },
    "UserSlots update": {
        "scope": "php",
        "prefix": "UserSlots::update",
        "body": "UserSlots::update([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"user_package_id\" => $3,\r\t\"no_slots\" => $4,\r\t\"referral_code\" => $5,\r\t\"referral_level\" => $6,\r\t\"node_level\" => $7,\r\t\"referrals_required\" => $8,\r\t\"referrals_acquired\" => $9,\r\t\"update_uplink\" => $10,\r\t\"status\" => $11,\r\t\"created_at\" => $12,\r\t\"updated_at\" => $13\r], \"WHERE ${14|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|} = 1\");"
    },
    "UserSlots delete": {
        "scope": "php",
        "prefix": "UserSlots::delete",
        "body": "UserSlots::delete(\"WHERE ${1|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|} = 1\");"
    },
    "UserSlots exist": {
        "scope": "php",
        "prefix": "UserSlots::exist",
        "body": "UserSlots::exist(\"WHERE ${1|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|} = 1\");"
    },
    "UserSlots findAll": {
        "scope": "php",
        "prefix": "UserSlots::findAll",
        "body": "UserSlots::findAll(\"${1:id, user_id, user_package_id, no_slots, referral_code, referral_level, node_level, referrals_required, referrals_acquired, update_uplink, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|} = 1\");"
    },
    "UserSlots findOne": {
        "scope": "php",
        "prefix": "UserSlots::findOne",
        "body": "UserSlots::findOne(\"${1:id, user_id, user_package_id, no_slots, referral_code, referral_level, node_level, referrals_required, referrals_acquired, update_uplink, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|} = 1\");"
    },
    "UserSlots findJoin": {
        "scope": "php",
        "prefix": "UserSlots::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rUserSlots::findJoin(${1:\"{\\$prefix\\}user_slots.${2|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|}\"}, \"WHERE ${3|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}user_slots.${6|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "UserSlots fields": {
        "scope": "php",
        "prefix": "user_slots.",
        "body": "\". DB_PREFIX .\"user_slots.${1|id,user_id,user_package_id,no_slots,referral_code,referral_level,node_level,referrals_required,referrals_acquired,update_uplink,status,created_at,updated_at|}"
    },
    "ReferralLevels create": {
        "scope": "php",
        "prefix": "ReferralLevels::create",
        "body": "ReferralLevels::create([\r\t\"id\" => $1,\r\t\"referrals_required\" => $2,\r\t\"rank\" => $3,\r\t\"cash_benefit\" => $4,\r\t\"benefits\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r]);"
    },
    "ReferralLevels create many": {
        "scope": "php",
        "prefix": "ReferralLevels::createMany",
        "body": "ReferralLevels::createMany([\r\t\"id\" => $1,\r\t\"referrals_required\" => $2,\r\t\"rank\" => $3,\r\t\"cash_benefit\" => $4,\r\t\"benefits\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r],\r${8:[]}\r);"
    },
    "ReferralLevels update": {
        "scope": "php",
        "prefix": "ReferralLevels::update",
        "body": "ReferralLevels::update([\r\t\"id\" => $1,\r\t\"referrals_required\" => $2,\r\t\"rank\" => $3,\r\t\"cash_benefit\" => $4,\r\t\"benefits\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r], \"WHERE ${8|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|} = 1\");"
    },
    "ReferralLevels delete": {
        "scope": "php",
        "prefix": "ReferralLevels::delete",
        "body": "ReferralLevels::delete(\"WHERE ${1|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|} = 1\");"
    },
    "ReferralLevels exist": {
        "scope": "php",
        "prefix": "ReferralLevels::exist",
        "body": "ReferralLevels::exist(\"WHERE ${1|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|} = 1\");"
    },
    "ReferralLevels findAll": {
        "scope": "php",
        "prefix": "ReferralLevels::findAll",
        "body": "ReferralLevels::findAll(\"${1:id, referrals_required, rank, cash_benefit, benefits, created_at, updated_at}\", \"WHERE ${2|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|} = 1\");"
    },
    "ReferralLevels findOne": {
        "scope": "php",
        "prefix": "ReferralLevels::findOne",
        "body": "ReferralLevels::findOne(\"${1:id, referrals_required, rank, cash_benefit, benefits, created_at, updated_at}\", \"WHERE ${2|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|} = 1\");"
    },
    "ReferralLevels findJoin": {
        "scope": "php",
        "prefix": "ReferralLevels::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rReferralLevels::findJoin(${1:\"{\\$prefix\\}referral_levels.${2|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|}\"}, \"WHERE ${3|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}referral_levels.${6|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "ReferralLevels fields": {
        "scope": "php",
        "prefix": "referral_levels.",
        "body": "\". DB_PREFIX .\"referral_levels.${1|id,referrals_required,rank,cash_benefit,benefits,created_at,updated_at|}"
    },
    "UserBenefits create": {
        "scope": "php",
        "prefix": "UserBenefits::create",
        "body": "UserBenefits::create([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"achievement\" => $3,\r\t\"cash\" => $4,\r\t\"benefit\" => $5,\r\t\"status\" => $6,\r\t\"created_at\" => $7,\r\t\"updated_at\" => $8\r]);"
    },
    "UserBenefits create many": {
        "scope": "php",
        "prefix": "UserBenefits::createMany",
        "body": "UserBenefits::createMany([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"achievement\" => $3,\r\t\"cash\" => $4,\r\t\"benefit\" => $5,\r\t\"status\" => $6,\r\t\"created_at\" => $7,\r\t\"updated_at\" => $8\r],\r${9:[]}\r);"
    },
    "UserBenefits update": {
        "scope": "php",
        "prefix": "UserBenefits::update",
        "body": "UserBenefits::update([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"achievement\" => $3,\r\t\"cash\" => $4,\r\t\"benefit\" => $5,\r\t\"status\" => $6,\r\t\"created_at\" => $7,\r\t\"updated_at\" => $8\r], \"WHERE ${9|id,user_id,achievement,cash,benefit,status,created_at,updated_at|} = 1\");"
    },
    "UserBenefits delete": {
        "scope": "php",
        "prefix": "UserBenefits::delete",
        "body": "UserBenefits::delete(\"WHERE ${1|id,user_id,achievement,cash,benefit,status,created_at,updated_at|} = 1\");"
    },
    "UserBenefits exist": {
        "scope": "php",
        "prefix": "UserBenefits::exist",
        "body": "UserBenefits::exist(\"WHERE ${1|id,user_id,achievement,cash,benefit,status,created_at,updated_at|} = 1\");"
    },
    "UserBenefits findAll": {
        "scope": "php",
        "prefix": "UserBenefits::findAll",
        "body": "UserBenefits::findAll(\"${1:id, user_id, achievement, cash, benefit, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,achievement,cash,benefit,status,created_at,updated_at|} = 1\");"
    },
    "UserBenefits findOne": {
        "scope": "php",
        "prefix": "UserBenefits::findOne",
        "body": "UserBenefits::findOne(\"${1:id, user_id, achievement, cash, benefit, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,achievement,cash,benefit,status,created_at,updated_at|} = 1\");"
    },
    "UserBenefits findJoin": {
        "scope": "php",
        "prefix": "UserBenefits::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rUserBenefits::findJoin(${1:\"{\\$prefix\\}user_benefits.${2|id,user_id,achievement,cash,benefit,status,created_at,updated_at|}\"}, \"WHERE ${3|id,user_id,achievement,cash,benefit,status,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}user_benefits.${6|id,user_id,achievement,cash,benefit,status,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "UserBenefits fields": {
        "scope": "php",
        "prefix": "user_benefits.",
        "body": "\". DB_PREFIX .\"user_benefits.${1|id,user_id,achievement,cash,benefit,status,created_at,updated_at|}"
    },
    "Notifications create": {
        "scope": "php",
        "prefix": "Notifications::create",
        "body": "Notifications::create([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"message\" => $3,\r\t\"route\" => $4,\r\t\"status\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r]);"
    },
    "Notifications create many": {
        "scope": "php",
        "prefix": "Notifications::createMany",
        "body": "Notifications::createMany([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"message\" => $3,\r\t\"route\" => $4,\r\t\"status\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r],\r${8:[]}\r);"
    },
    "Notifications update": {
        "scope": "php",
        "prefix": "Notifications::update",
        "body": "Notifications::update([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"message\" => $3,\r\t\"route\" => $4,\r\t\"status\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r], \"WHERE ${8|id,user_id,message,route,status,created_at,updated_at|} = 1\");"
    },
    "Notifications delete": {
        "scope": "php",
        "prefix": "Notifications::delete",
        "body": "Notifications::delete(\"WHERE ${1|id,user_id,message,route,status,created_at,updated_at|} = 1\");"
    },
    "Notifications exist": {
        "scope": "php",
        "prefix": "Notifications::exist",
        "body": "Notifications::exist(\"WHERE ${1|id,user_id,message,route,status,created_at,updated_at|} = 1\");"
    },
    "Notifications findAll": {
        "scope": "php",
        "prefix": "Notifications::findAll",
        "body": "Notifications::findAll(\"${1:id, user_id, message, route, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,message,route,status,created_at,updated_at|} = 1\");"
    },
    "Notifications findOne": {
        "scope": "php",
        "prefix": "Notifications::findOne",
        "body": "Notifications::findOne(\"${1:id, user_id, message, route, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,message,route,status,created_at,updated_at|} = 1\");"
    },
    "Notifications findJoin": {
        "scope": "php",
        "prefix": "Notifications::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rNotifications::findJoin(${1:\"{\\$prefix\\}notifications.${2|id,user_id,message,route,status,created_at,updated_at|}\"}, \"WHERE ${3|id,user_id,message,route,status,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}notifications.${6|id,user_id,message,route,status,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Notifications fields": {
        "scope": "php",
        "prefix": "notifications.",
        "body": "\". DB_PREFIX .\"notifications.${1|id,user_id,message,route,status,created_at,updated_at|}"
    },
    "Permissions create": {
        "scope": "php",
        "prefix": "Permissions::create",
        "body": "Permissions::create([\r\t\"id\" => $1,\r\t\"role\" => $2,\r\t\"permissions\" => $3,\r\t\"created_at\" => $4,\r\t\"updated_at\" => $5\r]);"
    },
    "Permissions create many": {
        "scope": "php",
        "prefix": "Permissions::createMany",
        "body": "Permissions::createMany([\r\t\"id\" => $1,\r\t\"role\" => $2,\r\t\"permissions\" => $3,\r\t\"created_at\" => $4,\r\t\"updated_at\" => $5\r],\r${6:[]}\r);"
    },
    "Permissions update": {
        "scope": "php",
        "prefix": "Permissions::update",
        "body": "Permissions::update([\r\t\"id\" => $1,\r\t\"role\" => $2,\r\t\"permissions\" => $3,\r\t\"created_at\" => $4,\r\t\"updated_at\" => $5\r], \"WHERE ${6|id,role,permissions,created_at,updated_at|} = 1\");"
    },
    "Permissions delete": {
        "scope": "php",
        "prefix": "Permissions::delete",
        "body": "Permissions::delete(\"WHERE ${1|id,role,permissions,created_at,updated_at|} = 1\");"
    },
    "Permissions exist": {
        "scope": "php",
        "prefix": "Permissions::exist",
        "body": "Permissions::exist(\"WHERE ${1|id,role,permissions,created_at,updated_at|} = 1\");"
    },
    "Permissions findAll": {
        "scope": "php",
        "prefix": "Permissions::findAll",
        "body": "Permissions::findAll(\"${1:id, role, permissions, created_at, updated_at}\", \"WHERE ${2|id,role,permissions,created_at,updated_at|} = 1\");"
    },
    "Permissions findOne": {
        "scope": "php",
        "prefix": "Permissions::findOne",
        "body": "Permissions::findOne(\"${1:id, role, permissions, created_at, updated_at}\", \"WHERE ${2|id,role,permissions,created_at,updated_at|} = 1\");"
    },
    "Permissions findJoin": {
        "scope": "php",
        "prefix": "Permissions::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rPermissions::findJoin(${1:\"{\\$prefix\\}permissions.${2|id,role,permissions,created_at,updated_at|}\"}, \"WHERE ${3|id,role,permissions,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}permissions.${6|id,role,permissions,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Permissions fields": {
        "scope": "php",
        "prefix": "permissions.",
        "body": "\". DB_PREFIX .\"permissions.${1|id,role,permissions,created_at,updated_at|}"
    },
    "UserSlot create": {
        "scope": "php",
        "prefix": "UserSlot::create",
        "body": "UserSlot::create([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"slot_program\" => $4,\r\t\"referral_code\" => $5,\r\t\"referrals_required\" => $6,\r\t\"referrals_acquired\" => $7,\r\t\"referredby\" => $8,\r\t\"referral_level\" => $9,\r\t\"rank\" => $10,\r\t\"status\" => $11,\r\t\"created_at\" => $12,\r\t\"updated_at\" => $13\r]);"
    },
    "UserSlot create many": {
        "scope": "php",
        "prefix": "UserSlot::createMany",
        "body": "UserSlot::createMany([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"slot_program\" => $4,\r\t\"referral_code\" => $5,\r\t\"referrals_required\" => $6,\r\t\"referrals_acquired\" => $7,\r\t\"referredby\" => $8,\r\t\"referral_level\" => $9,\r\t\"rank\" => $10,\r\t\"status\" => $11,\r\t\"created_at\" => $12,\r\t\"updated_at\" => $13\r],\r${14:[]}\r);"
    },
    "UserSlot update": {
        "scope": "php",
        "prefix": "UserSlot::update",
        "body": "UserSlot::update([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"slot_program\" => $4,\r\t\"referral_code\" => $5,\r\t\"referrals_required\" => $6,\r\t\"referrals_acquired\" => $7,\r\t\"referredby\" => $8,\r\t\"referral_level\" => $9,\r\t\"rank\" => $10,\r\t\"status\" => $11,\r\t\"created_at\" => $12,\r\t\"updated_at\" => $13\r], \"WHERE ${14|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserSlot delete": {
        "scope": "php",
        "prefix": "UserSlot::delete",
        "body": "UserSlot::delete(\"WHERE ${1|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserSlot exist": {
        "scope": "php",
        "prefix": "UserSlot::exist",
        "body": "UserSlot::exist(\"WHERE ${1|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserSlot findAll": {
        "scope": "php",
        "prefix": "UserSlot::findAll",
        "body": "UserSlot::findAll(\"${1:id, user_id, slot_id, slot_program, referral_code, referrals_required, referrals_acquired, referredby, referral_level, rank, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserSlot findOne": {
        "scope": "php",
        "prefix": "UserSlot::findOne",
        "body": "UserSlot::findOne(\"${1:id, user_id, slot_id, slot_program, referral_code, referrals_required, referrals_acquired, referredby, referral_level, rank, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserSlot findJoin": {
        "scope": "php",
        "prefix": "UserSlot::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rUserSlot::findJoin(${1:\"{\\$prefix\\}user_slots.${2|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|}\"}, \"WHERE ${3|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}user_slots.${6|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "UserSlot fields": {
        "scope": "php",
        "prefix": "user_slots.",
        "body": "\". DB_PREFIX .\"user_slots.${1|id,user_id,slot_id,slot_program,referral_code,referrals_required,referrals_acquired,referredby,referral_level,rank,status,created_at,updated_at|}"
    },
    "Update_favorite_to_favourite create": {
        "scope": "php",
        "prefix": "Update_favorite_to_favourite::create",
        "body": "Update_favorite_to_favourite::create([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r]);"
    },
    "Update_favorite_to_favourite create many": {
        "scope": "php",
        "prefix": "Update_favorite_to_favourite::createMany",
        "body": "Update_favorite_to_favourite::createMany([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r],\r${4:[]}\r);"
    },
    "Update_favorite_to_favourite update": {
        "scope": "php",
        "prefix": "Update_favorite_to_favourite::update",
        "body": "Update_favorite_to_favourite::update([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r], \"WHERE ${4|id,created_at,updated_at|} = 1\");"
    },
    "Update_favorite_to_favourite delete": {
        "scope": "php",
        "prefix": "Update_favorite_to_favourite::delete",
        "body": "Update_favorite_to_favourite::delete(\"WHERE ${1|id,created_at,updated_at|} = 1\");"
    },
    "Update_favorite_to_favourite exist": {
        "scope": "php",
        "prefix": "Update_favorite_to_favourite::exist",
        "body": "Update_favorite_to_favourite::exist(\"WHERE ${1|id,created_at,updated_at|} = 1\");"
    },
    "Update_favorite_to_favourite findAll": {
        "scope": "php",
        "prefix": "Update_favorite_to_favourite::findAll",
        "body": "Update_favorite_to_favourite::findAll(\"${1:id, created_at, updated_at}\", \"WHERE ${2|id,created_at,updated_at|} = 1\");"
    },
    "Update_favorite_to_favourite findOne": {
        "scope": "php",
        "prefix": "Update_favorite_to_favourite::findOne",
        "body": "Update_favorite_to_favourite::findOne(\"${1:id, created_at, updated_at}\", \"WHERE ${2|id,created_at,updated_at|} = 1\");"
    },
    "Update_favorite_to_favourite findJoin": {
        "scope": "php",
        "prefix": "Update_favorite_to_favourite::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rUpdate_favorite_to_favourite::findJoin(${1:\"{\\$prefix\\}update_favorite_to_favourite.${2|id,created_at,updated_at|}\"}, \"WHERE ${3|id,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}update_favorite_to_favourite.${6|id,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Update_favorite_to_favourite fields": {
        "scope": "php",
        "prefix": "update_favorite_to_favourite.",
        "body": "\". DB_PREFIX .\"update_favorite_to_favourite.${1|id,created_at,updated_at|}"
    },
    "UserPackage create": {
        "scope": "php",
        "prefix": "UserPackage::create",
        "body": "UserPackage::create([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"no_slots\" => $4,\r\t\"slot_program\" => $5,\r\t\"referral_code\" => $6,\r\t\"initial_referrals_required\" => $7,\r\t\"target_rank\" => $8,\r\t\"rank\" => $9,\r\t\"status\" => $10,\r\t\"created_at\" => $11,\r\t\"updated_at\" => $12\r]);"
    },
    "UserPackage create many": {
        "scope": "php",
        "prefix": "UserPackage::createMany",
        "body": "UserPackage::createMany([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"no_slots\" => $4,\r\t\"slot_program\" => $5,\r\t\"referral_code\" => $6,\r\t\"initial_referrals_required\" => $7,\r\t\"target_rank\" => $8,\r\t\"rank\" => $9,\r\t\"status\" => $10,\r\t\"created_at\" => $11,\r\t\"updated_at\" => $12\r],\r${13:[]}\r);"
    },
    "UserPackage update": {
        "scope": "php",
        "prefix": "UserPackage::update",
        "body": "UserPackage::update([\r\t\"id\" => $1,\r\t\"user_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"no_slots\" => $4,\r\t\"slot_program\" => $5,\r\t\"referral_code\" => $6,\r\t\"initial_referrals_required\" => $7,\r\t\"target_rank\" => $8,\r\t\"rank\" => $9,\r\t\"status\" => $10,\r\t\"created_at\" => $11,\r\t\"updated_at\" => $12\r], \"WHERE ${13|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserPackage delete": {
        "scope": "php",
        "prefix": "UserPackage::delete",
        "body": "UserPackage::delete(\"WHERE ${1|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserPackage exist": {
        "scope": "php",
        "prefix": "UserPackage::exist",
        "body": "UserPackage::exist(\"WHERE ${1|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserPackage findAll": {
        "scope": "php",
        "prefix": "UserPackage::findAll",
        "body": "UserPackage::findAll(\"${1:id, user_id, slot_id, no_slots, slot_program, referral_code, initial_referrals_required, target_rank, rank, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserPackage findOne": {
        "scope": "php",
        "prefix": "UserPackage::findOne",
        "body": "UserPackage::findOne(\"${1:id, user_id, slot_id, no_slots, slot_program, referral_code, initial_referrals_required, target_rank, rank, status, created_at, updated_at}\", \"WHERE ${2|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|} = 1\");"
    },
    "UserPackage findJoin": {
        "scope": "php",
        "prefix": "UserPackage::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rUserPackage::findJoin(${1:\"{\\$prefix\\}user_package.${2|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|}\"}, \"WHERE ${3|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}user_package.${6|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "UserPackage fields": {
        "scope": "php",
        "prefix": "user_package.",
        "body": "\". DB_PREFIX .\"user_package.${1|id,user_id,slot_id,no_slots,slot_program,referral_code,initial_referrals_required,target_rank,rank,status,created_at,updated_at|}"
    },
    "Alter_referral_level_to_varchar_in_userslots create": {
        "scope": "php",
        "prefix": "Alter_referral_level_to_varchar_in_userslots::create",
        "body": "Alter_referral_level_to_varchar_in_userslots::create([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r]);"
    },
    "Alter_referral_level_to_varchar_in_userslots create many": {
        "scope": "php",
        "prefix": "Alter_referral_level_to_varchar_in_userslots::createMany",
        "body": "Alter_referral_level_to_varchar_in_userslots::createMany([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r],\r${4:[]}\r);"
    },
    "Alter_referral_level_to_varchar_in_userslots update": {
        "scope": "php",
        "prefix": "Alter_referral_level_to_varchar_in_userslots::update",
        "body": "Alter_referral_level_to_varchar_in_userslots::update([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r], \"WHERE ${4|id,created_at,updated_at|} = 1\");"
    },
    "Alter_referral_level_to_varchar_in_userslots delete": {
        "scope": "php",
        "prefix": "Alter_referral_level_to_varchar_in_userslots::delete",
        "body": "Alter_referral_level_to_varchar_in_userslots::delete(\"WHERE ${1|id,created_at,updated_at|} = 1\");"
    },
    "Alter_referral_level_to_varchar_in_userslots exist": {
        "scope": "php",
        "prefix": "Alter_referral_level_to_varchar_in_userslots::exist",
        "body": "Alter_referral_level_to_varchar_in_userslots::exist(\"WHERE ${1|id,created_at,updated_at|} = 1\");"
    },
    "Alter_referral_level_to_varchar_in_userslots findAll": {
        "scope": "php",
        "prefix": "Alter_referral_level_to_varchar_in_userslots::findAll",
        "body": "Alter_referral_level_to_varchar_in_userslots::findAll(\"${1:id, created_at, updated_at}\", \"WHERE ${2|id,created_at,updated_at|} = 1\");"
    },
    "Alter_referral_level_to_varchar_in_userslots findOne": {
        "scope": "php",
        "prefix": "Alter_referral_level_to_varchar_in_userslots::findOne",
        "body": "Alter_referral_level_to_varchar_in_userslots::findOne(\"${1:id, created_at, updated_at}\", \"WHERE ${2|id,created_at,updated_at|} = 1\");"
    },
    "Alter_referral_level_to_varchar_in_userslots findJoin": {
        "scope": "php",
        "prefix": "Alter_referral_level_to_varchar_in_userslots::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rAlter_referral_level_to_varchar_in_userslots::findJoin(${1:\"{\\$prefix\\}alter_referral_level_to_varchar_in_userslots.${2|id,created_at,updated_at|}\"}, \"WHERE ${3|id,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}alter_referral_level_to_varchar_in_userslots.${6|id,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Alter_referral_level_to_varchar_in_userslots fields": {
        "scope": "php",
        "prefix": "alter_referral_level_to_varchar_in_userslots.",
        "body": "\". DB_PREFIX .\"alter_referral_level_to_varchar_in_userslots.${1|id,created_at,updated_at|}"
    },
    "Add_referral_code_to_user_package create": {
        "scope": "php",
        "prefix": "Add_referral_code_to_user_package::create",
        "body": "Add_referral_code_to_user_package::create([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r]);"
    },
    "Add_referral_code_to_user_package create many": {
        "scope": "php",
        "prefix": "Add_referral_code_to_user_package::createMany",
        "body": "Add_referral_code_to_user_package::createMany([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r],\r${4:[]}\r);"
    },
    "Add_referral_code_to_user_package update": {
        "scope": "php",
        "prefix": "Add_referral_code_to_user_package::update",
        "body": "Add_referral_code_to_user_package::update([\r\t\"id\" => $1,\r\t\"created_at\" => $2,\r\t\"updated_at\" => $3\r], \"WHERE ${4|id,created_at,updated_at|} = 1\");"
    },
    "Add_referral_code_to_user_package delete": {
        "scope": "php",
        "prefix": "Add_referral_code_to_user_package::delete",
        "body": "Add_referral_code_to_user_package::delete(\"WHERE ${1|id,created_at,updated_at|} = 1\");"
    },
    "Add_referral_code_to_user_package exist": {
        "scope": "php",
        "prefix": "Add_referral_code_to_user_package::exist",
        "body": "Add_referral_code_to_user_package::exist(\"WHERE ${1|id,created_at,updated_at|} = 1\");"
    },
    "Add_referral_code_to_user_package findAll": {
        "scope": "php",
        "prefix": "Add_referral_code_to_user_package::findAll",
        "body": "Add_referral_code_to_user_package::findAll(\"${1:id, created_at, updated_at}\", \"WHERE ${2|id,created_at,updated_at|} = 1\");"
    },
    "Add_referral_code_to_user_package findOne": {
        "scope": "php",
        "prefix": "Add_referral_code_to_user_package::findOne",
        "body": "Add_referral_code_to_user_package::findOne(\"${1:id, created_at, updated_at}\", \"WHERE ${2|id,created_at,updated_at|} = 1\");"
    },
    "Add_referral_code_to_user_package findJoin": {
        "scope": "php",
        "prefix": "Add_referral_code_to_user_package::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rAdd_referral_code_to_user_package::findJoin(${1:\"{\\$prefix\\}add_referral_code_to_user_package.${2|id,created_at,updated_at|}\"}, \"WHERE ${3|id,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}add_referral_code_to_user_package.${6|id,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Add_referral_code_to_user_package fields": {
        "scope": "php",
        "prefix": "add_referral_code_to_user_package.",
        "body": "\". DB_PREFIX .\"add_referral_code_to_user_package.${1|id,created_at,updated_at|}"
    },
    "CountryLeagues create": {
        "scope": "php",
        "prefix": "CountryLeagues::create",
        "body": "CountryLeagues::create([\r\t\"id\" => $1,\r\t\"country\" => $2,\r\t\"continent\" => $3,\r\t\"dial_code\" => $4,\r\t\"country_code\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r]);"
    },
    "CountryLeagues create many": {
        "scope": "php",
        "prefix": "CountryLeagues::createMany",
        "body": "CountryLeagues::createMany([\r\t\"id\" => $1,\r\t\"country\" => $2,\r\t\"continent\" => $3,\r\t\"dial_code\" => $4,\r\t\"country_code\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r],\r${8:[]}\r);"
    },
    "CountryLeagues update": {
        "scope": "php",
        "prefix": "CountryLeagues::update",
        "body": "CountryLeagues::update([\r\t\"id\" => $1,\r\t\"country\" => $2,\r\t\"continent\" => $3,\r\t\"dial_code\" => $4,\r\t\"country_code\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r], \"WHERE ${8|id,country,continent,dial_code,country_code,created_at,updated_at|} = 1\");"
    },
    "CountryLeagues delete": {
        "scope": "php",
        "prefix": "CountryLeagues::delete",
        "body": "CountryLeagues::delete(\"WHERE ${1|id,country,continent,dial_code,country_code,created_at,updated_at|} = 1\");"
    },
    "CountryLeagues exist": {
        "scope": "php",
        "prefix": "CountryLeagues::exist",
        "body": "CountryLeagues::exist(\"WHERE ${1|id,country,continent,dial_code,country_code,created_at,updated_at|} = 1\");"
    },
    "CountryLeagues findAll": {
        "scope": "php",
        "prefix": "CountryLeagues::findAll",
        "body": "CountryLeagues::findAll(\"${1:id, country, continent, dial_code, country_code, created_at, updated_at}\", \"WHERE ${2|id,country,continent,dial_code,country_code,created_at,updated_at|} = 1\");"
    },
    "CountryLeagues findOne": {
        "scope": "php",
        "prefix": "CountryLeagues::findOne",
        "body": "CountryLeagues::findOne(\"${1:id, country, continent, dial_code, country_code, created_at, updated_at}\", \"WHERE ${2|id,country,continent,dial_code,country_code,created_at,updated_at|} = 1\");"
    },
    "CountryLeagues findJoin": {
        "scope": "php",
        "prefix": "CountryLeagues::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rCountryLeagues::findJoin(${1:\"{\\$prefix\\}country_leagues.${2|id,country,continent,dial_code,country_code,created_at,updated_at|}\"}, \"WHERE ${3|id,country,continent,dial_code,country_code,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}country_leagues.${6|id,country,continent,dial_code,country_code,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "CountryLeagues fields": {
        "scope": "php",
        "prefix": "country_leagues.",
        "body": "\". DB_PREFIX .\"country_leagues.${1|id,country,continent,dial_code,country_code,created_at,updated_at|}"
    },
    "Competitions create": {
        "scope": "php",
        "prefix": "Competitions::create",
        "body": "Competitions::create([\r\t\"id\" => $1,\r\t\"slotpackage\" => $2,\r\t\"competition\" => $3,\r\t\"region\" => $4,\r\t\"sport\" => $5,\r\t\"qualified_teams\" => $6,\r\t\"created_at\" => $7,\r\t\"updated_at\" => $8\r]);"
    },
    "Competitions create many": {
        "scope": "php",
        "prefix": "Competitions::createMany",
        "body": "Competitions::createMany([\r\t\"id\" => $1,\r\t\"slotpackage\" => $2,\r\t\"competition\" => $3,\r\t\"region\" => $4,\r\t\"sport\" => $5,\r\t\"qualified_teams\" => $6,\r\t\"created_at\" => $7,\r\t\"updated_at\" => $8\r],\r${9:[]}\r);"
    },
    "Competitions update": {
        "scope": "php",
        "prefix": "Competitions::update",
        "body": "Competitions::update([\r\t\"id\" => $1,\r\t\"slotpackage\" => $2,\r\t\"competition\" => $3,\r\t\"region\" => $4,\r\t\"sport\" => $5,\r\t\"qualified_teams\" => $6,\r\t\"created_at\" => $7,\r\t\"updated_at\" => $8\r], \"WHERE ${9|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|} = 1\");"
    },
    "Competitions delete": {
        "scope": "php",
        "prefix": "Competitions::delete",
        "body": "Competitions::delete(\"WHERE ${1|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|} = 1\");"
    },
    "Competitions exist": {
        "scope": "php",
        "prefix": "Competitions::exist",
        "body": "Competitions::exist(\"WHERE ${1|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|} = 1\");"
    },
    "Competitions findAll": {
        "scope": "php",
        "prefix": "Competitions::findAll",
        "body": "Competitions::findAll(\"${1:id, slotpackage, competition, region, sport, qualified_teams, created_at, updated_at}\", \"WHERE ${2|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|} = 1\");"
    },
    "Competitions findOne": {
        "scope": "php",
        "prefix": "Competitions::findOne",
        "body": "Competitions::findOne(\"${1:id, slotpackage, competition, region, sport, qualified_teams, created_at, updated_at}\", \"WHERE ${2|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|} = 1\");"
    },
    "Competitions findJoin": {
        "scope": "php",
        "prefix": "Competitions::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rCompetitions::findJoin(${1:\"{\\$prefix\\}competitions.${2|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|}\"}, \"WHERE ${3|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}competitions.${6|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Competitions fields": {
        "scope": "php",
        "prefix": "competitions.",
        "body": "\". DB_PREFIX .\"competitions.${1|id,slotpackage,competition,region,sport,qualified_teams,created_at,updated_at|}"
    },
    "Payments create": {
        "scope": "php",
        "prefix": "Payments::create",
        "body": "Payments::create([\r\t\"id\" => $1,\r\t\"invoice_number\" => $2,\r\t\"reference\" => $3,\r\t\"email\" => $4,\r\t\"domain\" => $5,\r\t\"amount_paid\" => $6,\r\t\"ip_address\" => $7,\r\t\"payment_service\" => $8,\r\t\"channel\" => $9,\r\t\"currency\" => $10,\r\t\"gateway_response\" => $11,\r\t\"status\" => $12,\r\t\"paid_at\" => $13,\r\t\"created_at\" => $14,\r\t\"updated_at\" => $15\r]);"
    },
    "Payments create many": {
        "scope": "php",
        "prefix": "Payments::createMany",
        "body": "Payments::createMany([\r\t\"id\" => $1,\r\t\"invoice_number\" => $2,\r\t\"reference\" => $3,\r\t\"email\" => $4,\r\t\"domain\" => $5,\r\t\"amount_paid\" => $6,\r\t\"ip_address\" => $7,\r\t\"payment_service\" => $8,\r\t\"channel\" => $9,\r\t\"currency\" => $10,\r\t\"gateway_response\" => $11,\r\t\"status\" => $12,\r\t\"paid_at\" => $13,\r\t\"created_at\" => $14,\r\t\"updated_at\" => $15\r],\r${16:[]}\r);"
    },
    "Payments update": {
        "scope": "php",
        "prefix": "Payments::update",
        "body": "Payments::update([\r\t\"id\" => $1,\r\t\"invoice_number\" => $2,\r\t\"reference\" => $3,\r\t\"email\" => $4,\r\t\"domain\" => $5,\r\t\"amount_paid\" => $6,\r\t\"ip_address\" => $7,\r\t\"payment_service\" => $8,\r\t\"channel\" => $9,\r\t\"currency\" => $10,\r\t\"gateway_response\" => $11,\r\t\"status\" => $12,\r\t\"paid_at\" => $13,\r\t\"created_at\" => $14,\r\t\"updated_at\" => $15\r], \"WHERE ${16|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|} = 1\");"
    },
    "Payments delete": {
        "scope": "php",
        "prefix": "Payments::delete",
        "body": "Payments::delete(\"WHERE ${1|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|} = 1\");"
    },
    "Payments exist": {
        "scope": "php",
        "prefix": "Payments::exist",
        "body": "Payments::exist(\"WHERE ${1|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|} = 1\");"
    },
    "Payments findAll": {
        "scope": "php",
        "prefix": "Payments::findAll",
        "body": "Payments::findAll(\"${1:id, invoice_number, reference, email, domain, amount_paid, ip_address, payment_service, channel, currency, gateway_response, status, paid_at, created_at, updated_at}\", \"WHERE ${2|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|} = 1\");"
    },
    "Payments findOne": {
        "scope": "php",
        "prefix": "Payments::findOne",
        "body": "Payments::findOne(\"${1:id, invoice_number, reference, email, domain, amount_paid, ip_address, payment_service, channel, currency, gateway_response, status, paid_at, created_at, updated_at}\", \"WHERE ${2|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|} = 1\");"
    },
    "Payments findJoin": {
        "scope": "php",
        "prefix": "Payments::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rPayments::findJoin(${1:\"{\\$prefix\\}payments.${2|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|}\"}, \"WHERE ${3|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}payments.${6|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Payments fields": {
        "scope": "php",
        "prefix": "payments.",
        "body": "\". DB_PREFIX .\"payments.${1|id,invoice_number,reference,email,domain,amount_paid,ip_address,payment_service,channel,currency,gateway_response,status,paid_at,created_at,updated_at|}"
    },
    "ReferralBenefits create": {
        "scope": "php",
        "prefix": "ReferralBenefits::create",
        "body": "ReferralBenefits::create([\r\t\"id\" => $1,\r\t\"referral_level_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"cash\" => $4,\r\t\"souvenir\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r]);"
    },
    "ReferralBenefits create many": {
        "scope": "php",
        "prefix": "ReferralBenefits::createMany",
        "body": "ReferralBenefits::createMany([\r\t\"id\" => $1,\r\t\"referral_level_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"cash\" => $4,\r\t\"souvenir\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r],\r${8:[]}\r);"
    },
    "ReferralBenefits update": {
        "scope": "php",
        "prefix": "ReferralBenefits::update",
        "body": "ReferralBenefits::update([\r\t\"id\" => $1,\r\t\"referral_level_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"cash\" => $4,\r\t\"souvenir\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r], \"WHERE ${8|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "ReferralBenefits delete": {
        "scope": "php",
        "prefix": "ReferralBenefits::delete",
        "body": "ReferralBenefits::delete(\"WHERE ${1|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "ReferralBenefits exist": {
        "scope": "php",
        "prefix": "ReferralBenefits::exist",
        "body": "ReferralBenefits::exist(\"WHERE ${1|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "ReferralBenefits findAll": {
        "scope": "php",
        "prefix": "ReferralBenefits::findAll",
        "body": "ReferralBenefits::findAll(\"${1:id, referral_level_id, slot_id, cash, souvenir, created_at, updated_at}\", \"WHERE ${2|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "ReferralBenefits findOne": {
        "scope": "php",
        "prefix": "ReferralBenefits::findOne",
        "body": "ReferralBenefits::findOne(\"${1:id, referral_level_id, slot_id, cash, souvenir, created_at, updated_at}\", \"WHERE ${2|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "ReferralBenefits findJoin": {
        "scope": "php",
        "prefix": "ReferralBenefits::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rReferral_benefits::findJoin(${1:\"{\\$prefix\\}referral_benefits.${2|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|}\"}, \"WHERE ${3|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}referral_benefits.${6|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "ReferralBenefits fields": {
        "scope": "php",
        "prefix": "referral_benefits.",
        "body": "\". DB_PREFIX .\"referral_benefits.${1|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|}"
    },
    "Referral_benefits create": {
        "scope": "php",
        "prefix": "Referral_benefits::create",
        "body": "Referral_benefits::create([\r\t\"id\" => $1,\r\t\"referral_level_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"cash\" => $4,\r\t\"souvenir\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r]);"
    },
    "Referral_benefits create many": {
        "scope": "php",
        "prefix": "Referral_benefits::createMany",
        "body": "Referral_benefits::createMany([\r\t\"id\" => $1,\r\t\"referral_level_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"cash\" => $4,\r\t\"souvenir\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r],\r${8:[]}\r);"
    },
    "Referral_benefits update": {
        "scope": "php",
        "prefix": "Referral_benefits::update",
        "body": "Referral_benefits::update([\r\t\"id\" => $1,\r\t\"referral_level_id\" => $2,\r\t\"slot_id\" => $3,\r\t\"cash\" => $4,\r\t\"souvenir\" => $5,\r\t\"created_at\" => $6,\r\t\"updated_at\" => $7\r], \"WHERE ${8|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "Referral_benefits delete": {
        "scope": "php",
        "prefix": "Referral_benefits::delete",
        "body": "Referral_benefits::delete(\"WHERE ${1|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "Referral_benefits exist": {
        "scope": "php",
        "prefix": "Referral_benefits::exist",
        "body": "Referral_benefits::exist(\"WHERE ${1|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "Referral_benefits findAll": {
        "scope": "php",
        "prefix": "Referral_benefits::findAll",
        "body": "Referral_benefits::findAll(\"${1:id, referral_level_id, slot_id, cash, souvenir, created_at, updated_at}\", \"WHERE ${2|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "Referral_benefits findOne": {
        "scope": "php",
        "prefix": "Referral_benefits::findOne",
        "body": "Referral_benefits::findOne(\"${1:id, referral_level_id, slot_id, cash, souvenir, created_at, updated_at}\", \"WHERE ${2|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\");"
    },
    "Referral_benefits findJoin": {
        "scope": "php",
        "prefix": "Referral_benefits::findJoin",
        "body": "\/\/ Note: When joining, specify fieldnames as tablename.fieldname;\r\/\/ Prefix the every tablename with DB_PREFIX\r\\$prefix = DB_PREFIX;\rReferral_benefits::findJoin(${1:\"{\\$prefix\\}referral_benefits.${2|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|}\"}, \"WHERE ${3|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = 1\")\r\t->${4|leftJoin,rightJoin,innerJoin,fullJoin|}(\"{\\$prefix\\}tablename\", \"{\\$prefix\\}referral_benefits.${6|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|} = {\\$prefix\\}tablename.field\")\r\t->join();"
    },
    "Referral_benefits fields": {
        "scope": "php",
        "prefix": "referral_benefits.",
        "body": "\". DB_PREFIX .\"referral_benefits.${1|id,referral_level_id,slot_id,cash,souvenir,created_at,updated_at|}"
    }
}